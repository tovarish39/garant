# frozen_string_literal: true

class Event_bot
  include AASM

  # aasm whiny_transitions: false

  aasm do
    state :language

    state :start

    # üîé–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—èüîé
    state :await_userTo_data
    state :userTo
    state :currency_amount
    state :conditions
    state :confirmation_new_deal
    # ü§ù–°–¥–µ–ª–∫–∏ü§ù
    state :deals_menu, :await_disput_text, :marking_deal, :add_comment
    # üë®‚Äçüíº–ü—Ä–æ—Ñ–∏–ª—åüë®‚Äçüíº
    state :profile

    before_all_events   :log_before
    after_all_events    :log_after
    error_on_all_events :log_error

    event :language_action, from: :language do
      transitions if: lambda {
                        !$user.lang_viewed
                      }, after: :view_languages, to: :language # –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞
      transitions if: lambda {
                        text_mes?
                      }, after: :delete_text, to: :language # —É–¥–∞–ª—è–µ–º –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
      transitions if: -> { data?(/–í—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫/) }, after: :language_selected, to: :start # –∫–ª–∏–∫–Ω—É—Ç "—è–∑—ã–∫"
    end
    # :start
    event :start_action, from: :start do
      # /start
      transitions if: -> { text_mes?('/start') },         after: :to_start,      to: :start
      # üîé–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—èüîé
      transitions if: -> { text_mes?(T_find_user[$lg]) }, after: :find_userTo,   to: :await_userTo_data
      # ü§ù–°–¥–µ–ª–∫–∏ü§ù
      transitions if: -> { text_mes?(T_deals[$lg]) },     after: :to_deals_menu, to: :deals_menu
      # üë®‚Äçüíº–ü—Ä–æ—Ñ–∏–ª—åüë®‚Äçüíº
      transitions if: -> { text_mes?(T_profile[$lg]) &&  empty_wallet? },   after: :empty_wallet,  to: :start
      transitions if: -> { text_mes?(T_profile[$lg]) && !empty_wallet? },   after: :view_profile,  to: :profile
    end

    # üîé–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—èüîé
    ## :await_userTo_data
    event :await_userTo_data_action, from: :await_userTo_data do
      transitions if: lambda {
                        text_mes?(T_cancel[$lg])
                      }, after: :cancel,           to: :start # "–û—Ç–º–µ–Ω–∞"
      transitions if: lambda {
                        user_shared? && !bot_has_userTo?
                      }, after: :userTo_not_found, to: :await_userTo_data # userTo –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–∑ —Å–≤–æ–µ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      transitions if: lambda {
                        user_shared? && bot_has_userTo?
                      }, after: :run_to_userTo,    to: :userTo            # userTo    –Ω–∞–π–¥–µ–Ω –∏–∑ —Å–≤–æ–µ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      transitions if: lambda {
                        text_mes? && !bot_has_userTo?
                      }, after: :userTo_not_found, to: :await_userTo_data # userTo –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–∑ id || username
      transitions if: lambda {
                        text_mes? && bot_has_userTo?
                      }, after: :run_to_userTo, to: :userTo # userTo    –Ω–∞–π–¥–µ–Ω –∏–∑ id || username
    end

    event :userTo_action, from: :userTo do
      ## UserToActions
      transitions if: lambda {
                        data?(/Comments/) &&  has_comments?
                      }, after: :view_comments, to: :userTo # "–û—Ç–∑—ã–≤—ã"
      transitions if: lambda {
                        data?(/Comments/) && !has_comments?
                      }, after: :no_comments, to: :userTo # "–û—Ç–∑—ã–≤—ã"
      transitions if: lambda {
                        data?(/Disputes/)
                      }, after: :view_type_of_disputes, to: :userTo # "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"
      transitions if: lambda {
                        data?(/Offer_deal/)
                      }, after: :choose_role, to: :userTo # "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–¥–µ–ª–∫—É"
      ## Comments TypeOfDisputes Role CurrencyTypes
      transitions if: -> { data?(/Back_to userTo_actions/) }, after: :to_userTo_from_back, to: :userTo # "–ù–∞–∑–∞–¥"
      ## TypeOfDisputes
      transitions if: lambda {
                        data?(/Won_disputes/)
                      }, after: :disputes_won, to: :userTo # "–í—ã–π–≥—Ä–∞–ª —Å–ø–æ—Ä–æ–≤"
      transitions if: lambda {
                        data?(/Lost_disputes/)
                      }, after: :disputes_lost, to: :userTo # "–ü—Ä–æ–∏–≥—Ä–∞–ª —Å–ø–æ—Ä–æ–≤"
      ## WonDisputes LostDisputes
      transitions if: -> { data?(/Back_to TypeOfDisputes/) }, after: :back_to_type_of_disputes, to: :userTo # "–ù–∞–∑–∞–¥"
      ## Role
      transitions if: lambda {
                        data?(/I`m custumer/)
                      }, after: :choose_type_of_currencies, to: :userTo # "–Ø –ø–æ–∫—É–ø–∞—Ç–µ–ª—å"
      transitions if: lambda {
                        data?(/I`m seller/)
                      }, after: :choose_type_of_currencies, to: :userTo # "–Ø –ø—Ä–æ–¥–∞–≤–µ—Ü"
      ## CurrencyTypes
      transitions if: lambda {
                        data?(/Criptocurrencies/)
                      }, after: :choose_specific_currency, to: :userTo # "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞"
      transitions if: lambda {
                        data?(/Another/)
                      }, to: :userTo # –µ—â—ë –Ω–µ —Å–¥–µ–ª–∞–Ω–æ
      ## Currencies
      transitions if: lambda {
                        data?(/back_to CurrencyTypes/)
                      }, after: :back_to_CurrencyTypes, to: :userTo # "–ù–∞–∑–∞–¥"
      transitions if: lambda {
                        data?(/Currency/)
                      }, after: :choose_amount, to: :currency_amount # –í—ã–±–æ—Ä –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã
    end
    ## :currency_amount
    event :currency_amount_action, from: :currency_amount do
      transitions if: lambda {
                        text_mes?(/^\s*\d+([,.]\d+)?\s*$/)
                      }, after: :choose_conditions, to: :conditions #    –≤–∞–ª–∏–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç—ã
      transitions unless: lambda {
                            text_mes?(/^\s*\d+([,.]\d+)?\s*$/)
                          }, after: :amount_invalid, to: :currency_amount # –Ω–µ –≤–∞–ª–∏–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç—ã
    end
    ## :conditions
    event :conditions_action, from: :conditions do
      transitions if: lambda {
                        text_mes?
                      }, after: :to_confirming, to: :confirmation_new_deal # –≤–≤–æ–¥ —É—Å–ª–æ–≤–∏–π —Å–¥–µ–ª–∫–∏
    end
    ## :confirmation_new_deal
    event :confirmation_new_deal_action, from: :confirmation_new_deal do
      transitions if: lambda {
                        data?(/Confirming_new_deal/)
                      }, after: :deal_request, to: :start # —Å–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ seller || custumer
      transitions if: lambda {
                        data?(/Cancel_new_deal/)
                      }, after: :to_userTo_from_back, to: :userTo # "–û—Ç–º–µ–Ω–∞" —Å–¥–µ–ª–∫–∏ (–Ω–µ —Å–æ–∑–¥–∞–Ω–∏–µ)
    end
    # ü§ù–°–¥–µ–ª–∫–∏ü§ù
    ## :deals_menu

    event :deals_menu_action, from: :deals_menu do
      ## '–û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä'
      transitions if: lambda {
                        data?(/Open_disput/) && valid_deal_status?
                      }, after: :to_await_disput_text, to: :await_disput_text
      transitions if: lambda {
                        data?(/Open_disput/) && !valid_deal_status?
                      }, after: :invalid_deal_status, to: :deals_menu # "–û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä" —É–∂–µ –±—ã–ª–∞ –∫–µ–º-—Ç–æ –Ω–∞–∂–∞—Ç–∞
      ## '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'  –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏, —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–µ—Ä–µ–≤–æ–¥—è—Ç—Å—è –ø—Ä–æ–¥–∞–≤—Ü—É
      transitions if: lambda {
                        data?(/Finish_deal/) && valid_deal_status?
                      }, after: :finishing_deal_by_custumer, to: :marking_deal
      transitions if: lambda {
                        data?(/Finish_deal/) && !valid_deal_status?
                      }, after: :invalid_deal_status, to: :deals_menu # "–û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä" —É–∂–µ –±—ã–ª–∞ –∫–µ–º-—Ç–æ –Ω–∞–∂–∞—Ç–∞
      ## "–û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É" –ø—Ä–æ–¥–∞–≤–µ—Ü –æ—Ç–º–µ–Ω—è–µ—Ç —Å–¥–µ–ª–∫—É, —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–µ—Ä–µ–≤–æ–¥—è—Ç—Å—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
      transitions if: lambda {
                        data?(/Cancel_exist_deal/) && valid_deal_status?
                      }, after: :canceled_deal_by_seller, to: :deals_menu
      transitions if: lambda {
                        data?(/Cancel_exist_deal/) && !valid_deal_status?
                      }, after: :invalid_deal_status, to: :deals_menu # "–û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä" —É–∂–µ –±—ã–ª–∞ –∫–µ–º-—Ç–æ –Ω–∞–∂–∞—Ç–∞

      ## '–ê–∫—Ç–∏–≤–Ω—ã–µ'
      transitions if: lambda {
                        text_mes?(T_active[$lg]) && !has_active_deals?
                      }, after: :hasnot_active_deals,  to: :deals_menu #  –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
      transitions if: lambda {
                        text_mes?(T_active[$lg]) && has_active_deals?
                      }, after: :view_active_deals,    to: :deals_menu # –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
      ## '–ó–∞–ø—Ä–æ—Å—ã'
      transitions if: lambda {
                        text_mes?(T_requests[$lg]) && !has_request_deals?
                      }, after: :hasnot_request_deals, to: :deals_menu #  –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
      transitions if: lambda {
                        text_mes?(T_requests[$lg]) && has_request_deals?
                      }, after: :view_request_deals, to: :deals_menu # –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
      ## '–°–ø–æ—Ä—ã'
      transitions if: lambda {
                        text_mes?(T_disputes[$lg]) && !has_dispute_deals?
                      }, after: :hasnot_dispute_deals, to: :deals_menu #  –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
      transitions if: lambda {
                        text_mes?(T_disputes[$lg]) && has_dispute_deals?
                      }, after: :view_dispute_deals, to: :deals_menu # –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
      ## '–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫'
      transitions if: lambda {
                        text_mes?(T_deals_history[$lg]) && !has_history_deals?
                      }, after: :hasnot_history_deals, to: :deals_menu #  –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
      transitions if: lambda {
                        text_mes?(T_deals_history[$lg]) && has_history_deals?
                      }, after: :view_history_deals, to: :deals_menu # –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
      ## '–ù–∞–∑–∞–¥'
      transitions if: lambda {
                        text_mes?(T_back[$lg])
                      }, after: :to_start, to: :start # "–ù–∞–∑–∞–¥"
    end
    ## :await_disput_text
    event :await_disput_text_action, from: :await_disput_text do
      transitions if: -> { text_mes?(T_cancel[$lg]) }, after: :to_deals_menu, to: :deals_menu # "–û—Ç–º–µ–Ω–∞" —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–æ—Ä–∞
      transitions if: -> { text_mes? }, after: :create_dispute, to: :deals_menu # —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–æ—Ä–∞
    end
    ## :profile
    event :profile_action, from: :profile do
      transitions if: -> { data?('Extract') }, after: :extracting, to: :start
    end
    ## :marking_deal
    event :marking_deal_action, from: :marking_deal do
      transitions if: -> { data?(/stars/) }, after: :to_add_comment, to: :add_comment
    end

    event :add_comment_action, from: :add_comment do
      transitions if: -> { data?('skip_comment') }, after: :delete_pushed, to: :deals_menu
      transitions if: -> { text_mes? }, after: :handle_comment, to: :deals_menu
    end
  end
  def log_before
    $logger.info("BEFORE ; user_id = #{$user.id} ; from_state = #{aasm.current_state} ; '#{income_message}'")
  end

  def log_after
    $logger.info("AFTER  ; user_id = #{$user.id} ; new_state  = #{aasm.current_state}")
  end

  def log_error(exception)
    #     fail
    $logger.error("ERR ; user_id = #{$user.id} #{exception}")
  end
end

def handle
  $user = searching_user              # –ø–æ–∏—Å–∫ —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ user
  $user ||= create_user unless $user  # —Å–æ–∑–¥–∞–Ω–∏–µ user, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
  $lg = $user.lang
  update_user_info_if_changed         # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ user, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª
  $chat_id = $mes.instance_of?(MessageClass) ? $mes.chat.id : $mes.message.chat.id

  # —é–∑–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª|—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
  if    $mes.instance_of?(UpdateMember)
    new_status = $mes.new_chat_member.status
    $user.update(with_bot_status: new_status) if new_status == 'member'
    $user.update(with_bot_status: new_status) if new_status == 'kicked'
  # –ø—Ä–∏ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏     –Ω–µ –∏–∑–º–µ–Ω—è—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  elsif $lg && data?(/Reject/); rejecting_deal # –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ    —Å–¥–µ–ª–∫–∏ seller || custumer
  elsif $lg && data?(/Accept/); accepting_deal # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ seller || custumer
  # –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–∑–º–µ–Ω—è—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  else
    from_state = if !$lg
                   'language'.to_sym # —è–∑—ã–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø–µ—Ä–µ–≤–æ–¥ –≤ "language" —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                 elsif click_main_button_or_start?
                   'start'.to_sym # –∫–ª–∏–∫–Ω—É—Ç–∞ –≥–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é –∏–ª–∏ '/start', –ø–µ—Ä–µ–≤–æ–¥ –≤ "start" —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                 else
                   $user.aasm_state.to_sym # –ø—Ä–µ–¥–∏–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                 end

    St_machine.aasm.current_state = from_state
    St_machine.method("#{from_state}_action").call # event = #{from_state}_action

    new_state = St_machine.aasm.current_state
    $user.update(aasm_state: new_state)                  # –∑–∞–ø–∏—Å—å –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  end
end
